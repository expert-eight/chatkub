// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(uuid())
  username      String   @unique
  real_username String?  @unique
  facebookId    String?  @unique
  googleId      String?  @unique
  lineId        String?  @unique
  discordId     String?  @unique
  password      String
  balance       Decimal  @default(0.00) @db.Decimal(10, 2)
  tier          TierList @default(MEMBER)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  Member        Member?
}

model Admin {
  id         String   @id @default(uuid())
  username   String   @unique
  password   String
  SECRET_2FA String   @default("-")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Member {
  id          String  @id @default(uuid())
  full_name   String?
  email       String?
  phone       String?
  emailVerify Boolean @default(false)
  phoneVerify Boolean @default(false)

  profileImage  String           @default("-")
  loginProvider AuthProviderList @default(WEB)
  isActive      Boolean          @default(false)

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "userId_index")
}

enum AuthProviderList {
  WEB
  FACEBOOK
  GOOGLE
  LINE
  DISCORD
}

enum TierList {
  MEMBER
  VIP_1
  VIP_2
  VIP_3
  VIP_4
}
